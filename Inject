#!/usr/bin/env bash

## for debugging, remove all single #, double ## is used for documentation
clear
echo ".___            __               __    _________                _____.__                  .__  .__          __"
echo "|   | ____     |__| ____   _____/  |_  \_   ___ \  ____   _____/ ____\__| ____     ______ |  | |__| _______/  |_ "
echo "|   |/    \    |  |/ __ \_/ ___\   __\ /    \  \/ /  _ \ /    \   __\|  |/ ___\    \____ \|  | |  |/  ___/\   __\ "
echo "|   |   |  \   |  \  ___/\  \___|  |   \     \___(  <_> )   |  \  |  |  / /_/  >   |  |_> >  |_|  |\___ \  |  |  "
echo "|___|___|  /\__|  |\___  >\___  >__|    \______  /\____/|___|  /__|  |__\___  / /\ |   __/|____/__/____  > |__|"
echo "         \/\______|    \/     \/               \/            \/        /_____/  \/ |__|                \/       "

## Setting the homefolder
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"        # Homedir

##load the config file
##. /path/to/some.config
. /$DIR/config.config

cleanup()
{
  rm -rf "$tempFolder"
}

exitRoutine()
{
  cleanup
  exit 1
}

helpFunction()
{
  clear
  echo "Endpoint is specified in -a"
  echo
  echo "ipa file is specified in -i, The script is drag and drop friendly"
  echo
  echo "Define -e with (d)ev/(a)cc/(p)rod for the correct environment"
  exitRoutine
}

## Define the aruments that can be used in the script
while getopts "i:?:h:a:e:" opt
do
   case "$opt" in
      i ) ipaArg="$OPTARG" ;;               # Ipa path argument
      a ) apiArg="$OPTARG" ;;               # Api endpoint
      e ) environmentArg="$OPTARG" ;;       # Define (d)ev/(a)cc/(p)rod
      ? ) helpFunction ;;                   # Print helpFunction in case parameter is non-existent
      h ) helpFunction ;;                   # Print helpFunction in case parameter is non-existent
   esac
done

checks()
{
  echo
  if [[ -z "$ipaArg"  ]] || [[ -z "$apiArg" ]] || [[ -z "$environmentArg" ]]
  then
  echo WRONG!
  helpFunction
  fi
  echo ipaArg: $ipaArg
  echo apiArg: $apiArg
  echo environmentArg: $environmentArg
}

setVars()
{
  echo "setting the variables"
  echo "----"
  fixDate=$(date +"%Y%m%d-%Hh%M")
  tempFolder="$DIR/_TEMP"
  toBeInjected="$DIR/toBeInjected"
  destinationFolder="$DIR/InjectedFiles"
}

##copy and extract the ipa
copyAndExtract()
{
  echo "copying and extrating the .ipa file"
  echo "----"
  cp "$ipaArg" "$toBeInjected"
  cd "$toBeInjected"
  ipa=$(ls | grep ".ipa")
  unzip -qq "$ipa"
  ipaNoIpa=$(echo ${ipa%????})
}

getApp()
{
  cd "$toBeInjected/Payload"
  app=$(ls | grep ".app")
}

getConfigPlist()
{
  cd "$toBeInjected/Payload/$app"
  config=$(ls | grep "Config.plist")
  # plutil -p $config
}

setNewValues()
{
  echo "Calculating the new config values"
  echo "----"
  case $environmentArg in
    d )
    environment="DEV"
    apiUrlValue="https://$apiArg-dev-api-mtls.my.ucb-dev.be"
    apiTokenUrlValue="https://$apiArg-dev-token-mtls.my.ucb-dev.be"
    apiSignalrOriginValue="https://$apiArg-dev-televisits.my.ucb-dev.be"
    apiSignalrUrlValue="https://apis.ucb-apps.be/v1/dev-btpa-$apiArg-api"
    notificationHubNameValue="ucb-anh-btpm-801"
    notificationHubKeyNameValue="DefaultListenSharedAccessSignature"
    notificationHubKeyValue=$notificationHubKeyValueDEV
    notificationHubBaseAddressValue="https://ucb-nhn-btpm.servicebus.windows.net/ucb-anh-btpm-801"
      ;;
    a)
    environment="ACC"
    apiUrlValue="https://$apiArg-acc-api-mtls.my.ucb-acc.be"
    apiTokenUrlValue="https://$apiArg-acc-token-mtls.my.ucb-acc.be"
    apiSignalrOriginValue="https://$apiArg-acc-televisits.my.ucb-acc.be"
    apiSignalrUrlValue="https://apis.ucb-apps.be/v1/acc-btpa-$apiArg-api"
    notificationHubNameValue="ucb-anh-btpm-001"
    notificationHubKeyNameValue="DefaultListenSharedAccessSignature"
    notificationHubKeyValue=$notificationHubKeyValuePRD
    notificationHubBaseAddressValue="https://ucb-nhn-btpm.servicebus.windows.net/ucb-anh-btpm-001"
      ;;
    p )
    environment="PRD"
    apiUrlValue="https://$apiArg-dev-api-mtls.my.ucb.com"
    apiTokenUrlValue="https://$apiArg-dev-token-mtls.my.ucb.com"
    apiSignalrOriginValue="https://$apiArg-televisits.my.ucb.com"
    apiSignalrUrlValue="https://apis.ucb-apps.be/v1/btpa-$apiArg-api"
    notificationHubNameValue="ucb-anh-btpm-001"
    notificationHubKeyNameValue="DefaultListenSharedAccessSignature"
    notificationHubKeyValue=$notificationHubKeyValuePRD
    notificationHubBaseAddressValue="https://ucb-nhn-btpm.servicebus.windows.net/ucb-anh-btpm-001"
      ;;
  esac
}

replaceValues()
{
  echo "Replacing the old config values"
  echo "----"
  plutil -replace apiUrl -string $apiUrlValue "$config"
  plutil -replace apiTokenUrl -string $apiTokenUrlValue "$config"
  plutil -replace apiSignalrOrigin -string $apiSignalrOriginValue "$config"
  plutil -replace apiSignalrUrl -string $apiSignalrUrlValue "$config"
  plutil -replace notificationHubName -string $notificationHubNameValue "$config"
  plutil -replace notificationHubKeyName -string $notificationHubKeyNameValue "$config"
  plutil -replace notificationHubKey -string $notificationHubKeyValueDEV "$config"
  plutil -replace notificationHubBaseAddress -string $notificationHubBaseAddressValue "$config"
  # plutil -p "$config"
  newConfig=$(cat "$config")
  extractNewConfigName="$ipaNoIpa""_$apiArg""-$environment"".xml"
  echo $newConfig >> "$destinationFolder/$extractNewConfigName"
  plutil -convert xml1 "$destinationFolder/$extractNewConfigName"
}

zipAndName()
{
  echo "Zipping the new ipa with the new configs inside"
  echo "----"
  newipaName="$ipaNoIpa""_$apiArg""-$environment"".ipa"
  cd "$toBeInjected"
  zip -qq -r $newipaName ./Payload
}

moveAndClean()
{
  echo "Moving and clean all folders and files"
  echo "----"
  cd "$toBeInjected"
  rm -rf Payload
  rm $ipa
  mv "$newipaName" "$destinationFolder/$newipaName"
  open "$destinationFolder"
}

###-----------------------------------
## calling the funtions
checks
setVars
copyAndExtract
getApp
getConfigPlist
setNewValues
replaceValues
zipAndName
moveAndClean
